<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.exratione</groupId>
  <artifactId>sdgexample</artifactId>
  <version>0.6.2</version>
  <packaging>jar</packaging>

  <name>scala-dropwizard-guice-example</name>

  <properties>
    <dropwizard.guice.version>0.6.2</dropwizard.guice.version>
    <dropwizard.version>0.6.2</dropwizard.version>
    <guava.version>15.0</guava.version>
    <jackson.version>2.4.5</jackson.version>
    <junit.version>4.8.1</junit.version>
    <mavanagaiata.plugin.version>0.7.0</mavanagaiata.plugin.version>
    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
    <maven.enforcer.plugin.version>1.4</maven.enforcer.plugin.version>
    <maven.jar.plugin.version>2.5</maven.jar.plugin.version>
    <maven.resources.plugin.version>2.5</maven.resources.plugin.version>
    <maven.shade.plugin.version>2.3</maven.shade.plugin.version>
    <maven.surefire.plugin.version>2.18.1</maven.surefire.plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <scala.binary.version>2.10</scala.binary.version>
    <scala.collection.version>1.5</scala.collection.version>
    <scala.guice.version>3.0.2</scala.guice.version>
    <scala.maven.plugin.version>3.2.0</scala.maven.plugin.version>
    <scala.lib.version>2.10.3</scala.lib.version>
    <scala.dropwizard.version>0.6.2-1</scala.dropwizard.version>
    <scalamock.version>3.2.1</scalamock.version>
    <scalatest.version>2.2.3</scalatest.version>
  </properties>

  <dependencies>
    <!-- Scala -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.lib.version}</version>
    </dependency>

    <!-- Convert Java collections to Scala collections. -->
    <dependency>
      <groupId>org.scalaj</groupId>
      <artifactId>scalaj-collection_${scala.binary.version}</artifactId>
      <version>${scala.collection.version}</version>
    </dependency>

    <!-- Guice extensions for Scala -->
    <dependency>
      <groupId>net.codingwell</groupId>
      <artifactId>scala-guice_${scala.binary.version}</artifactId>
      <version>${scala.guice.version}</version>
    </dependency>

    <!--
      It is important to explicitly control the version of this dependency,
      as by default it will pull in a later version that has issues in this
      particular setup.
    -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>

    <!-- Dropwizard. -->
    <dependency>
      <groupId>com.yammer.dropwizard</groupId>
      <artifactId>dropwizard-core</artifactId>
      <version>${dropwizard.version}</version>
    </dependency>
    <dependency>
      <groupId>com.massrelevance</groupId>
      <artifactId>dropwizard-scala_${scala.binary.version}</artifactId>
      <version>${scala.dropwizard.version}</version>
    </dependency>
    <!-- This will pull in an appropriate version of Guice. -->
    <dependency>
      <groupId>com.hubspot.dropwizard</groupId>
      <artifactId>dropwizard-guice</artifactId>
      <version>${dropwizard.guice.version}</version>
    </dependency>

    <!--
      Ensure that we're using a specified version of Jackson rather that what
      will turn up via the dependencies. This is necessary.
     -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-joda</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-guava</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-scala_${scala.binary.version}</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_2.10</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalamock</groupId>
      <artifactId>scalamock-scalatest-support_2.10</artifactId>
      <version>${scalamock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>
    <directory>${basedir}/target</directory>
    <sourceDirectory>src/main</sourceDirectory>
    <outputDirectory>${basedir}/target/classes</outputDirectory>
    <testSourceDirectory>src/test</testSourceDirectory>
    <testOutputDirectory>${basedir}/target/test-classes</testOutputDirectory>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>src/main/scala</directory>
        <excludes>
          <exclude>**/*.scala</exclude>
        </excludes>
      </resource>
      <resource>
        <targetPath>resources</targetPath>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/scala</directory>
        <excludes>
          <exclude>**/*.scala</exclude>
        </excludes>
      </testResource>
      <testResource>
        <targetPath>resources</targetPath>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>

    <!--
      Plugins defined to execute in the same phase execute in the order they
      are entered below.
    -->
    <plugins>

      <!--
      ======================================================================
      Phase: validate
      ======================================================================
      -->

      <!-- Enforce a minimum Maven and Java version. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven.enforcer.plugin.version}</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <phase>validate</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <!--
                    Maven 3.0.3 or later. That's the earliest version to enforce
                    declaration ordering for plugins in the same phase.
                   -->
                  <version>[3.0.3,)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <!-- Java 1.7 or later. -->
                  <version>[1.7,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <!--
        Obtaining git information. Here the commit sha will be available via
        the mvngit.commit.id property.
      -->
      <plugin>
        <groupId>com.github.koraktor</groupId>
        <artifactId>mavanagaiata</artifactId>
        <version>${mavanagaiata.plugin.version}</version>
        <executions>
          <execution>
            <id>git-commit</id>
            <phase>validate</phase>
            <goals>
              <goal>commit</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      ======================================================================
      Phase: process-resources
      ======================================================================
      -->

      <!--
        For Scala/Java cross-compilation. See:
        http://davidb.github.com/scala-maven-plugin
      -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${scala.maven.plugin.version}</version>
        <executions>
          <execution>
            <id>scala-compile</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <args>
                <arg>-make:transitive</arg>
                <arg>-dependencyfile</arg>
                <arg>${project.build.directory}/.scala_dependencies</arg>
              </args>
            </configuration>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <args>
                <arg>-make:transitive</arg>
                <arg>-dependencyfile</arg>
                <arg>${project.build.directory}/.scala_dependencies</arg>
              </args>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resources.plugin.version}</version>
      </plugin>

      <!--
      ======================================================================
      Phase: test
      ======================================================================
      -->

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven.surefire.plugin.version}</version>
          <configuration>
            <includes>
              <include>**/*Test.class</include>
            </includes>
          </configuration>
        </plugin>

      <!--
      ======================================================================
      Phase: package
      ======================================================================
      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven.jar.plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
            <!-- Put some useful entries into the manifest file for the JAR. -->
            <manifestEntries>
              <buildTime>${maven.build.timestamp}</buildTime>
              <commitId>${mvngit.commit.id}</commitId>
            </manifestEntries>
          </archive>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>

      <!--
        The shade plugin adds all the dependencies to the output JAR.

        Note that for large projects, packaging into a single JAR file can
        produce a file that cannot be read in Java 1.7. See:

        http://stackoverflow.com/questions/13021423/invalid-or-corrupt-jar-file-built-by-maven-shade-plugin

        This will report the JAR file as corrupt:

        java -jar <path/to/jar> server <path/to/config>

        This will still work, however:

        java -cp <path/to/jar> <main.class.name> server <path/to/config>
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven.shade.plugin.version}</version>
        <configuration>
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
              </excludes>
            </filter>
          </filters>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <finalName>${project.artifactId}</finalName>
              <!--
                By default this ends up in the project directory, not the build
                directory.
              -->
              <dependencyReducedPomLocation>${project.build.directory}/dependency-reduced-pom.xml</dependencyReducedPomLocation>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.exratione.sdgexample.SdgExampleScalaService</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
